name: Presubmit

on:
  pull_request:
  push:
    branches-ignore:
      # push events to main branch occur after PRs are merged, when the same checks were run
      - main
  workflow_dispatch:

jobs:
  build-linux-x86_64-with-gfxstream:
    name: build rutabaga with gfxstream (Linux x86_64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu
          components: rust-src
      - uses: ./.github/actions/install-deps
      - name: Checkout gfxstream
        run: git clone --depth 1 https://github.com/google/gfxstream
      - name: build and install gfxstream
        run: |
          cd gfxstream
          meson setup build
          ninja -C build
          sudo ninja -C build install
      - name: Build Project
        run: >
          cargo build --package rutabaga_gfx --package kumquat_virtio
          --package rutabaga_gfx_ffi --features=gfxstream
          --target=x86_64-unknown-linux-gnu

  meson-test-with-gfxstream:
    name: test rutabaga with gfxstream (Linux x86_64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu
          components: rust-src
      - uses: ./.github/actions/install-deps
      - name: Checkout gfxstream
        run: git clone --depth 1 https://github.com/google/gfxstream
      - name: build and install gfxstream
        run: |
          cd gfxstream
          meson setup build
          ninja -C build
          sudo ninja -C build install
      - name: Setup Meson build directory
        run: meson setup amd64-build -Dfeatures="gfxstream" -Dffi=true -Dkumquat=true -Dbuild-tests=true
      - name: Run tests
        run: meson test -C amd64-build

  build-windows-x86_64-with-gfxstream:
    name: build rutabaga with gfxstream (windows x86_64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          path-type: inherit
          install: |
            git
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-python
            mingw-w64-ucrt-x86_64-meson
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-headers-git
            mingw-w64-ucrt-x86_64-pkg-config
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rust-src
      - name: Add windows-gnu target
        run: rustup target add x86_64-pc-windows-gnu
      - name: Checkout gfxstream
        run: git clone --depth 1 https://github.com/google/gfxstream
      - name: build and install gfxstream
        shell: msys2 {0}
        run: |
          cd gfxstream
          meson setup build
          ninja -C build
          ninja -C build install
      - name: Build Project
        shell: msys2 {0}
        env:
          PKG_CONFIG_PATH: /ucrt64/lib/pkgconfig
          PKG_CONFIG_ALLOW_CROSS: 1
        run: >
          cargo build --package rutabaga_gfx --package kumquat_virtio
          --package rutabaga_gfx_ffi --features=gfxstream
          --target=x86_64-pc-windows-gnu

  build-linux-x86_64-with-virgl:
    name: build rutabaga with virgl (Linux x86_64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu
          components: rust-src
      - uses: ./.github/actions/install-deps
      - name: Checkout virgl
        run: git clone --depth 1 https://gitlab.freedesktop.org/virgl/virglrenderer.git
      - name: Checkout minigbm
        run: git clone --depth 1 https://chromium.googlesource.com/chromiumos/platform/minigbm
      - name: build and install minigbm
        run: |
          cd minigbm
          sudo make install DESTDIR=/usr/local LIBDIR=/lib INCLUDEDIR=/include OUT=out
      - name: build and install virglrenderer
        run: |
          cd virglrenderer
          meson setup build
          ninja -C build
          sudo ninja -C build install
      - name: Build Project
        run: >
          cargo build --package rutabaga_gfx --features=virgl_renderer,gbm
          --target=x86_64-unknown-linux-gnu

  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rust-src
      - name: Install homebrew dependencies
        run: brew install meson ninja pkg-config
      - name: Setup Meson build directory
        run: meson setup build -Dffi=true -Dkumquat=true
      - name: Compile
        run: ninja -C build

  clippy:
    name: Clippy Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rust-src
      - name: Run clippy
        run: cargo clippy --workspace -- -D warnings

  cross-compile-windows:
    name: Cross-compile for Windows (x86_64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            meson \
            ninja-build \
            pkg-config \
            mingw-w64 \
            mingw-w64-tools \
            bindgen

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.81.0"
          targets: x86_64-pc-windows-gnu

      - name: Create Meson cross file
        run: |
          cat <<EOF > cross_file_x86_64_linux_mingw.txt
          [binaries]
          c = '/usr/bin/x86_64-w64-mingw32-gcc'
          cpp = '/usr/bin/x86_64-w64-mingw32-g++'
          ar = '/usr/bin/x86_64-w64-mingw32-ar'
          strip = '/usr/bin/x86_64-w64-mingw32-strip'
          pkg-config = '/usr/bin/x86_64-w64-mingw32-pkg-config'
          rust = ['rustc', '--target', 'x86_64-pc-windows-gnu']

          [host_machine]
          system = 'windows'
          cpu_family = 'x86_64'
          cpu = 'i686'
          endian = 'little'
          EOF

      - name: Setup Meson build directory
        run: meson setup build-mingw --cross-file cross_file_x86_64_linux_mingw.txt

      - name: Compile
        run: ninja -C build-mingw
